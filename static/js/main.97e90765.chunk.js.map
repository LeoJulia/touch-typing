{"version":3,"sources":["styles/colorVariables.scss","redux/selectors/typingText.js","redux/actions/typingText.js","redux/consts/actions.js","components/Results.js","components/TextField.js","components/TextInput.js","components/Timer.js","pages/TouchTypingPage.js","containers/App.js","containers/TouchTyping.js","redux/reducers/typingText.js","redux/reducers/index.js","utils/serviceWorker.js","index.js"],"names":["module","exports","getActiveText","typingText","activeText","getTimerData","isTimer","getStartTime","startTime","getEndTime","endTime","startRace","time","type","Results","seconds","speed","symbolCount","millis","minutes","Math","floor","toFixed","millisToMinutesAndSeconds","round","StyledTextField","styled","div","theme","gray","dark","blue","TextField","text","StyledTextInput","input","white","darkGray","TextInput","onInput","target","props","value","this","isFinish","setRef","onChange","disabled","ref","Component","defaultProps","TimerContainer","grayTransparent","Timer","state","timerID","setInterval","tick","clearInterval","setState","onEnd","Date","now","Button","button","red","mapDispatchToProps","setTimer","start","restart","TouchTypingPage","connect","onClick","TouchTyping","length","variables","require","StyledApp","BeforeFocus","span","Focus","isError","onFinish","setRace","TouchTypingClass","onClear","keyCode","typeFocusText","indexOf","onTyping","key","afterFocusText","split","newAfterFocusText","newBeforeFocusText","newTypeFocusText","shift","prevState","beforeFocusText","isSuccessInput","document","addEventListener","focus","removeEventListener","textElement","join","el","defaultStore","reducer","combineReducers","store","action","Boolean","window","location","hostname","match","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.97e90765.chunk.js","sourcesContent":["module.exports = {\"white\":\"rgb(249, 247, 247)\",\"gray\":\"rgb(219, 226, 239)\",\"darkGray\":\"rgb(128, 128, 128)\",\"grayTransparent\":\"rgba(219, 226, 239, 0.5)\",\"blue\":\"rgb(63, 114, 175)\",\"dark\":\"rgb(17, 45, 78)\",\"red\":\"rgb(242, 140, 159)\"};","export const getActiveText = ({ typingText }) => (typingText ? typingText.activeText : '');\r\nexport const getTimerData = ({ typingText }) => (typingText ? typingText.isTimer : false);\r\nexport const getStartTime = ({ typingText }) => (typingText ? typingText.startTime : null);\r\nexport const getEndTime = ({ typingText }) => (typingText ? typingText.endTime : null);\r\n","import { RESTART_RACE, FINISH, START_TIMER, START_RACE } from '../consts';\r\n\r\nexport const setFinish = time => ({\r\n  type: FINISH,\r\n  time,\r\n});\r\n\r\nexport const startRace = time => ({\r\n  type: START_RACE,\r\n  time,\r\n});\r\n\r\nexport const startTimer = () => ({\r\n  type: START_TIMER,\r\n});\r\n\r\nexport const restartRace = () => ({\r\n  type: RESTART_RACE,\r\n});\r\n","export const FINISH = 'FINISH';\r\nexport const START_TIMER = 'START_TIMER';\r\nexport const START_RACE = 'START_RACE';\r\nexport const RESTART_RACE = 'RESTART_RACE';\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction millisToMinutesAndSeconds(millis) {\r\n  const minutes = Math.floor(millis / 60000);\r\n  const seconds = ((millis % 60000) / 1000).toFixed(0);\r\n  return `${minutes} : ${seconds < 10 ? '0' : ''}${seconds}`;\r\n}\r\n\r\nexport const Results = ({ startTime, endTime, symbolCount }) => {\r\n  const seconds = endTime - startTime;\r\n  const speed = symbolCount / (seconds / 60000);\r\n\r\n  return (\r\n    <>\r\n      <span>{millisToMinutesAndSeconds(seconds)}</span>\r\n      <span>{Math.round(speed)}</span>\r\n    </>\r\n  );\r\n};\r\n\r\nResults.propTypes = {\r\n  startTime: PropTypes.number,\r\n  endTime: PropTypes.number,\r\n  symbolCount: PropTypes.number,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledTextField = styled.div`\r\n  width: 40%;\r\n  height: 200px;\r\n  background-color: ${({ theme }) => theme.gray};\r\n  color: ${({ theme }) => theme.dark};\r\n  padding: 15px;\r\n  border-radius: 15px;\r\n  border: 1px dashed ${({ theme }) => theme.blue};\r\n`;\r\n\r\nexport const TextField = ({ text }) => <StyledTextField>{text}</StyledTextField>;\r\n\r\nTextField.propTypes = {\r\n  text: PropTypes.element,\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledTextInput = styled.input`\r\n  margin-top: 15px;\r\n  width: 40%;\r\n  padding: 10px;\r\n  background-color: ${({ theme }) => theme.white};\r\n  color: ${({ theme }) => theme.dark};\r\n  border-radius: 15px;\r\n  border: none;\r\n  outline: none;\r\n\r\n  &:disabled {\r\n    background-color: ${({ theme }) => theme.darkGray};\r\n  }\r\n`;\r\n\r\nexport class TextInput extends Component {\r\n  onInput = ({ target }) => {\r\n    const { onInput } = this.props;\r\n    onInput(target.value);\r\n  };\r\n\r\n  render() {\r\n    const { value, isFinish, setRef } = this.props;\r\n\r\n    return (\r\n      <StyledTextInput\r\n        type=\"text\"\r\n        onChange={this.onInput}\r\n        value={value}\r\n        disabled={isFinish}\r\n        ref={setRef}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nTextInput.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  isFinish: PropTypes.bool,\r\n  onInput: PropTypes.func,\r\n  setRef: PropTypes.func,\r\n};\r\n\r\nTextInput.defaultProps = {\r\n  onInput: () => {},\r\n  setRef: () => {},\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst TimerContainer = styled.div`\r\n  position: absolute;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  background-color: ${({ theme }) => theme.grayTransparent};\r\n\r\n  & span {\r\n    display: block;\r\n    color: ${({ theme }) => theme.white};\r\n    font-size: 150px;\r\n  }\r\n`;\r\n\r\nexport class Timer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: 3,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timerID = setInterval(() => {\r\n      const { value } = this.state;\r\n      if (value !== -1) {\r\n        this.tick();\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  tick() {\r\n    this.setState(\r\n      ({ value }) => ({\r\n        value: --value,\r\n      }),\r\n      () => {\r\n        const { value } = this.state;\r\n        const { onEnd } = this.props;\r\n\r\n        if (value === -1) {\r\n          onEnd(Date.now());\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { value } = this.state;\r\n\r\n    return (\r\n      <TimerContainer>\r\n        <span>{value}</span>\r\n      </TimerContainer>\r\n    );\r\n  }\r\n}\r\n\r\nTimer.propTypes = {\r\n  onEnd: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nimport { TouchTyping } from '../containers';\r\nimport { getStartTime, getEndTime, getActiveText, getTimerData } from '../redux/selectors';\r\nimport { startTimer, startRace, restartRace } from '../redux/actions';\r\nimport { Results, Timer } from '../components';\r\n\r\nconst Button = styled.button`\r\n  margin-top: 15px;\r\n  border-radius: 10px;\r\n  border: 1px dashed ${({ theme }) => theme.white};\r\n  padding: 5px;\r\n  width: 100px;\r\n  text-align: center;\r\n  background-color: transparent;\r\n  color: ${({ theme }) => theme.white};\r\n  outline: none;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    background-color: ${({ theme }) => theme.red};\r\n  }\r\n`;\r\n\r\nconst mapStateToProps = state => ({\r\n  startTime: getStartTime(state),\r\n  endTime: getEndTime(state),\r\n  text: getActiveText(state),\r\n  isTimer: getTimerData(state),\r\n});\r\nconst mapDispatchToProps = {\r\n  setTimer: startTimer,\r\n  start: startRace,\r\n  restart: restartRace,\r\n};\r\n\r\nconst TouchTypingContainer = ({ startTime, endTime, setTimer, text, isTimer, start, restart }) => (\r\n  <>\r\n    {!startTime && !endTime && <Button onClick={setTimer}>Start</Button>}\r\n    {isTimer && <Timer onEnd={start} />}\r\n    {startTime && !endTime && <TouchTyping />}\r\n    {endTime && startTime && (\r\n      <>\r\n        <Results startTime={startTime} endTime={endTime} symbolCount={text.length} />\r\n        <Button onClick={restart}>Restart</Button>\r\n      </>\r\n    )}\r\n  </>\r\n);\r\n\r\nexport const TouchTypingPage = connect(mapStateToProps, mapDispatchToProps)(TouchTypingContainer);\r\n\r\nTouchTypingContainer.propTypes = {\r\n  text: PropTypes.string,\r\n  startTime: PropTypes.number,\r\n  endTime: PropTypes.number,\r\n  setTimer: PropTypes.func,\r\n  start: PropTypes.func,\r\n  restart: PropTypes.func,\r\n  isTimer: PropTypes.bool,\r\n};\r\n","/* eslint-disable import/no-unresolved */\n/* eslint-disable import/no-webpack-loader-syntax */\nimport React from 'react';\nimport styled, { ThemeProvider } from 'styled-components';\n\nimport { TouchTypingPage } from '../pages';\n\n// eslint-disable-next-line max-len\nconst variables = require('sass-extract-loader?{\"plugins\": [\"sass-extract-js\"]}!../styles/colorVariables.scss');\n\nconst StyledApp = styled.div`\n  background-color: ${({ theme }) => theme.dark};\n  color: ${({ theme }) => theme.white};\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: 16px;\n`;\n\nexport function App() {\n  return (\n    <ThemeProvider theme={variables}>\n      <StyledApp>\n        <TouchTypingPage />\n      </StyledApp>\n    </ThemeProvider>\n  );\n}\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { TextField, TextInput } from '../components';\r\nimport { getActiveText, getStartTime, getEndTime } from '../redux/selectors';\r\nimport { setFinish, startRace } from '../redux/actions';\r\n\r\nconst BeforeFocus = styled.span`\r\n  color: ${({ theme }) => theme.darkGray};\r\n`;\r\n\r\nconst Focus = styled.span`\r\n  color: ${({ isError, theme }) => (isError ? theme.red : theme.blue)};\r\n  text-decoration: underline;\r\n`;\r\n\r\nconst mapStateToProps = state => ({\r\n  text: getActiveText(state),\r\n  startTime: getStartTime(state),\r\n  endTime: getEndTime(state),\r\n});\r\n\r\nconst mapDispatchToProps = { onFinish: setFinish, setRace: startRace };\r\n\r\nclass TouchTypingClass extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      text: props.text,\r\n      typingText: '',\r\n      isError: false,\r\n      beforeFocusText: [],\r\n      typeFocusText: '',\r\n      afterFocusText: [],\r\n      isSuccessInput: false,\r\n    };\r\n\r\n    this.input = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { text } = this.state;\r\n\r\n    const beforeFocusText = [];\r\n    const afterFocusText = text.split(' ');\r\n    const typeFocusText = afterFocusText.shift();\r\n\r\n    document.addEventListener('keypress', this.onTyping);\r\n    document.addEventListener('keyup', this.onClear);\r\n\r\n    this.setState({\r\n      beforeFocusText,\r\n      typeFocusText,\r\n      afterFocusText,\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { startTime } = this.props;\r\n    if (startTime) {\r\n      this.input.focus();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('keypress', this.onTyping);\r\n    document.removeEventListener('keyup', this.onClear);\r\n  }\r\n\r\n  onClear = ({ keyCode }) => {\r\n    if (keyCode !== 8) return;\r\n\r\n    const { typeFocusText, typingText } = this.state;\r\n\r\n    if (typeFocusText.indexOf(typingText) !== -1) {\r\n      this.setState({\r\n        isError: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  onTyping = ({ keyCode, key }) => {\r\n    const { afterFocusText, typeFocusText, typingText, isError } = this.state;\r\n\r\n    if (typeFocusText.split('')[typingText.length] !== key) {\r\n      this.setState({\r\n        isError: true,\r\n      });\r\n    }\r\n\r\n    if (typeFocusText.length === typingText.length && keyCode === 32 && !isError) {\r\n      const newAfterFocusText = [...afterFocusText];\r\n      const newBeforeFocusText = typeFocusText;\r\n      const newTypeFocusText = newAfterFocusText.shift();\r\n\r\n      this.setState(prevState => ({\r\n        typeFocusText: newTypeFocusText,\r\n        afterFocusText: newAfterFocusText,\r\n        beforeFocusText: [...prevState.beforeFocusText, newBeforeFocusText],\r\n        isError: false,\r\n        typingText: '',\r\n        isSuccessInput: true,\r\n      }));\r\n    }\r\n\r\n    if (afterFocusText.length === 0 && (key === '.' || key === '!' || key === '?')) {\r\n      const { onFinish } = this.props;\r\n      const newBeforeFocusText = typeFocusText;\r\n\r\n      this.setState(prevState => ({\r\n        typeFocusText: '',\r\n        typingText: '',\r\n        isSuccessInput: true,\r\n        beforeFocusText: [...prevState.beforeFocusText, newBeforeFocusText],\r\n        afterFocusText: [],\r\n      }));\r\n\r\n      onFinish(Date.now());\r\n    }\r\n  };\r\n\r\n  onInput = value => {\r\n    const { isSuccessInput } = this.state;\r\n\r\n    if (isSuccessInput) {\r\n      this.setState({\r\n        isSuccessInput: false,\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      typingText: value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { afterFocusText, typeFocusText, beforeFocusText, typingText, isError } = this.state;\r\n    const { endTime } = this.props;\r\n\r\n    const textElement = (\r\n      <span>\r\n        <BeforeFocus>{`${beforeFocusText.join(' ')} `}</BeforeFocus>\r\n        <Focus isError={isError}>{typeFocusText}</Focus>\r\n        {` ${afterFocusText.join(' ')}`}\r\n      </span>\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <TextField text={textElement} />\r\n        <TextInput\r\n          value={typingText}\r\n          isFinish={!!endTime}\r\n          onInput={this.onInput}\r\n          setRef={el => {\r\n            this.input = el;\r\n          }}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport const TouchTyping = connect(mapStateToProps, mapDispatchToProps)(TouchTypingClass);\r\n\r\nTouchTypingClass.propTypes = {\r\n  text: PropTypes.string,\r\n  onFinish: PropTypes.func,\r\n  setRace: PropTypes.func,\r\n  setTimer: PropTypes.func,\r\n  startTime: PropTypes.number,\r\n  endTime: PropTypes.number,\r\n};\r\n","import { FINISH, START_TIMER, START_RACE, RESTART_RACE } from '../consts';\r\n\r\nconst defaultStore = {\r\n  typingText: {\r\n    activeText: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\r\n    isTimer: false,\r\n  },\r\n};\r\n\r\nexport const typingText = (store = defaultStore.typingText, action) => {\r\n  switch (action.type) {\r\n    case FINISH:\r\n      return { ...store, endTime: action.time };\r\n    case START_TIMER:\r\n      return {\r\n        ...store,\r\n        isTimer: true,\r\n      };\r\n    case START_RACE:\r\n      return {\r\n        ...store,\r\n        isTimer: false,\r\n        startTime: action.time,\r\n      };\r\n    case RESTART_RACE:\r\n      return {\r\n        ...defaultStore,\r\n      };\r\n    default:\r\n      return store;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\n\r\nimport { typingText } from './typingText';\r\n\r\nexport const reducer = combineReducers({ typingText });\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* eslint-disable no-use-before-define */\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport { App } from './containers';\nimport { reducer } from './redux/reducers';\n\nimport * as serviceWorker from './utils/serviceWorker';\nimport './index.scss';\n\nconst store = createStore(\n  reducer,\n  // eslint-disable-next-line no-underscore-dangle\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["redux/selectors/typingText.ts","redux/actions/typingText.ts","redux/consts/actions.ts","pages/TouchTypingPage/components/Results.tsx","pages/TouchTypingPage/components/Timer.tsx","pages/TouchTypingPage/TouchTypingPage.tsx","containers/App.tsx","components/Avatar.tsx","components/TextField.tsx","components/TextInput.tsx","containers/StartTypingContainer.tsx","redux/actions/textConfig.ts","redux/selectors/textConfig.ts","containers/TouchTyping.tsx","redux/reducers/typingText.ts","redux/reducers/textConfig.ts","redux/reducers/index.ts","utils/serviceWorker.ts","index.tsx"],"names":["getActiveText","typingText","activeText","getTimerData","isTimer","getStartTime","startTime","getEndTime","endTime","startRace","time","type","Results","seconds","speed","symbolCount","millis","minutes","Math","floor","toFixed","msToMinutesAndSeconds","round","TimerContainer","styled","div","Timer","props","timerID","state","value","this","setInterval","tick","clearInterval","setState","onEnd","Date","now","Component","Button","button","mapDispatchToProps","restartRace","TouchTypingPage","connect","text","StartTypingContainer","TouchTyping","length","onClick","StyledApp","App","AvatarImg","img","Avatar","defaultProps","StyledTextField","TextField","StyledTextInput","input","TextInput","onInput","target","isFinish","setRef","maxLength","onChange","disabled","ref","Container","Text","Title","startTimer","changeLang","langCode","fetchTexts","dispatch","fetch","then","res","json","error","console","texts","receiveTexts","StartTyping","map","key","_id","title","slice","textConfig","BeforeFocus","span","Focus","isError","setFinish","TouchTypingClass","onClear","keyCode","typeFocusText","indexOf","onTyping","afterFocusText","split","newAfterFocusText","newBeforeFocusText","newTypeFocusText","shift","prevState","beforeFocusText","isSuccessInput","document","addEventListener","focus","removeEventListener","textElement","join","el","defaultStore","selectedLang","isFetching","selectedText","reducer","combineReducers","store","action","Boolean","window","location","hostname","match","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.678e6c3d.chunk.js","sourcesContent":["export const getActiveText = ({ typingText }) => (typingText ? typingText.activeText : '');\nexport const getTimerData = ({ typingText }) => (typingText ? typingText.isTimer : false);\nexport const getStartTime = ({ typingText }) => (typingText ? typingText.startTime : null);\nexport const getEndTime = ({ typingText }) => (typingText ? typingText.endTime : null);\n","import { RESTART_RACE, FINISH, START_TIMER, START_RACE } from '../consts';\n\nexport interface ActionCreator {\n  type: string;\n  time?: number;\n  text?: string;\n}\n\nexport const setFinish = (time: number): ActionCreator => ({\n  type: FINISH,\n  time,\n});\n\nexport const startRace = (time: number): ActionCreator => ({\n  type: START_RACE,\n  time,\n});\n\nexport const startTimer = (text): ActionCreator => ({\n  type: START_TIMER,\n  text,\n});\n\nexport const restartRace = (): ActionCreator => ({\n  type: RESTART_RACE,\n});\n","export const FINISH = 'FINISH';\nexport const START_TIMER = 'START_TIMER';\nexport const START_RACE = 'START_RACE';\nexport const RESTART_RACE = 'RESTART_RACE';\nexport const CHANGE_LANG = 'CHANGE_LANG';\nexport const REQUEST_TEXTS = 'REQUEST_TEXTS';\nexport const RECEIVE_TEXTS = 'RECEIVE_TEXTS';\n","import React from 'react';\n\nfunction msToMinutesAndSeconds(millis) {\n  const minutes = Math.floor(millis / 60000);\n  const seconds = +((millis % 60000) / 1000).toFixed(0);\n  return `${minutes} : ${seconds < 10 ? '0' : ''}${seconds}`;\n}\n\nexport const Results = ({ startTime, endTime, symbolCount }) => {\n  const seconds = endTime - startTime;\n  const speed = symbolCount / (seconds / 60000);\n\n  return (\n    <>\n      <span>{`Время прохождения: ${msToMinutesAndSeconds(seconds)}`}</span>\n      <span>{`Скорость: ${Math.round(speed)} зн/мин`}</span>\n    </>\n  );\n};\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst TimerContainer = styled.div`\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: var(--grayTransparent);\n\n  & span {\n    display: block;\n    color: var(--white);\n    font-size: 150px;\n  }\n`;\n\ninterface TimerState {\n  value: number;\n}\n\nexport class Timer extends Component<any, TimerState> {\n  private timerID;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 3,\n    };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => {\n      const { value } = this.state;\n      if (value !== -1) {\n        this.tick();\n      }\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState(\n      ({ value }) => ({\n        value: --value,\n      }),\n      () => {\n        const { value } = this.state;\n        const { onEnd } = this.props;\n\n        if (value === -1) {\n          onEnd(Date.now());\n        }\n      },\n    );\n  }\n\n  render() {\n    const { value } = this.state;\n\n    return (\n      <TimerContainer>\n        <span>{value}</span>\n      </TimerContainer>\n    );\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { StartTypingContainer, TouchTyping } from '../../containers';\nimport { getStartTime, getEndTime, getActiveText, getTimerData } from '../../redux/selectors';\nimport { startRace, restartRace, ActionCreator } from '../../redux/actions';\nimport { Results, Timer } from './components';\n\nconst Button = styled.button`\n  margin-top: 15px;\n  border-radius: 10px;\n  border: 1px dashed var(--white);\n  padding: 5px;\n  width: 100px;\n  text-align: center;\n  background-color: transparent;\n  color: var(--white);\n  outline: none;\n\n  &:hover {\n    cursor: pointer;\n    background-color: var(--red);\n  }\n`;\n\nconst mapStateToProps = (state) => ({\n  startTime: getStartTime(state),\n  endTime: getEndTime(state),\n  text: getActiveText(state),\n  isTimer: getTimerData(state),\n});\n\nconst mapDispatchToProps = {\n  startRace,\n  restartRace,\n};\n\ninterface TouchTypingPageImplProps {\n  startTime: number;\n  endTime: number;\n  text: string;\n  isTimer: boolean;\n  startRace(time: number): ActionCreator;\n  restartRace(): ActionCreator;\n}\n\nconst TouchTypingPageImpl = ({\n  startTime,\n  endTime,\n  text,\n  isTimer,\n  startRace,\n  restartRace,\n}: TouchTypingPageImplProps) => (\n  <>\n    {!startTime && !endTime && <StartTypingContainer />}\n    {isTimer && <Timer onEnd={startRace} />}\n    {startTime && !endTime && <TouchTyping />}\n    {endTime && startTime && (\n      <>\n        <Results startTime={startTime} endTime={endTime} symbolCount={text.length} />\n        <Button onClick={() => restartRace()}>На главную</Button>\n      </>\n    )}\n  </>\n);\n\nexport const TouchTypingPage = connect(mapStateToProps, mapDispatchToProps)(TouchTypingPageImpl);\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { TouchTypingPage } from '../pages';\n\nconst StyledApp = styled.div`\n  background-color: var(--dark);\n  color: var(--white);\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: 16px;\n`;\n\nexport function App() {\n  return (\n    <StyledApp>\n      <TouchTypingPage />\n    </StyledApp>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst AvatarImg = styled.img`\n  background-image: url(${({ img }: { img: any }) => img});\n  width: 50px;\n  height: 50px;\n  border: 1px dashed var(--white);\n  border-radius: 50%;\n  margin-bottom: 15px;\n`;\n\nexport const Avatar = ({ img }) => <AvatarImg img={img} />;\n\nAvatar.defaultProps = {\n  img: 'https://picsum.photos/50',\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledTextField = styled.div`\n  width: 40%;\n  height: 200px;\n  background-color: var(--gray);\n  color: var(--dark);\n  padding: 15px;\n  border-radius: 15px;\n  border: 1px dashed var(--blue);\n`;\n\nexport const TextField = ({ text }) => <StyledTextField>{text}</StyledTextField>;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst StyledTextInput = styled.input`\n  margin-top: 15px;\n  width: 40%;\n  padding: 10px;\n  background-color: var(--white);\n  color: var(--dark);\n  border-radius: 15px;\n  border: none;\n  outline: none;\n\n  &:disabled {\n    background-color: var(--darkGray);\n  }\n`;\n\nexport interface TextInputProps {\n  onInput: any;\n  value: any;\n  isFinish: any;\n  setRef: any;\n  maxLength?: any;\n}\n\nexport class TextInput extends Component<TextInputProps> {\n  onInput = ({ target }) => {\n    const { onInput } = this.props;\n    onInput(target.value);\n  };\n\n  render() {\n    const { value, isFinish, setRef, maxLength } = this.props;\n\n    return (\n      <StyledTextInput\n        type=\"text\"\n        onChange={this.onInput}\n        value={value}\n        disabled={isFinish}\n        ref={setRef}\n        maxLength={maxLength}\n      />\n    );\n  }\n}\n\n// TextInput.defaultProps = {\n//   onInput: () => {},\n//   setRef: () => {},\n//   maxLength: 100,\n// };\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { startTimer, changeLang, fetchTexts, ActionCreator } from '../redux/actions';\nimport { getTexts } from '../redux/selectors';\nimport { Avatar } from '../components';\n\nconst Button = styled.button`\n  flex-grow: 1;\n  border-radius: 10px;\n  border: 1px dashed var(--white);\n  padding: 5px;\n  width: 100px;\n  background-color: transparent;\n  color: var(--white);\n  outline: none;\n\n  &:hover {\n    cursor: pointer;\n    background-color: var(--red);\n  }\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Text = styled.div`\n  display: flex;\n  padding: 5px;\n  width: 200px;\n`;\nconst Title = styled.div`\n  flex-grow: 3;\n`;\n\nconst mapDispatchToProps = {\n  startTimer,\n  changeLang,\n  fetchTexts,\n};\n\nconst mapStateToProps = (state) => ({\n  texts: getTexts(state),\n});\n\ninterface StartTypingProps {\n  startTimer(text: string): ActionCreator;\n  fetchTexts();\n  texts: any;\n}\n\nclass StartTyping extends Component<StartTypingProps> {\n  componentDidMount() {\n    const { fetchTexts } = this.props;\n\n    fetchTexts();\n  }\n\n  render() {\n    const { startTimer, texts } = this.props;\n\n    return (\n      <>\n        <Avatar />\n        <Container>\n          {texts.map((text) => (\n            // eslint-disable-next-line no-underscore-dangle\n            <Text key={text._id}>\n              <Title>{text.title}</Title>\n              <Button onClick={() => startTimer(text.text.slice(0, 100))}>Начать</Button>\n            </Text>\n          ))}\n        </Container>\n      </>\n    );\n  }\n}\n\nexport const StartTypingContainer = connect(mapStateToProps, mapDispatchToProps)(StartTyping);\n","import { CHANGE_LANG, REQUEST_TEXTS, RECEIVE_TEXTS } from '../consts';\n\nexport interface TextConfigCreator {\n  type: string;\n  langCode?: string;\n  texts?: string[];\n}\n\nexport const changeLang = (langCode: string): TextConfigCreator => ({\n  type: CHANGE_LANG,\n  langCode,\n});\n\nexport const requestTexts = (): TextConfigCreator => ({\n  type: REQUEST_TEXTS,\n});\n\nexport const receiveTexts = (json): TextConfigCreator => ({\n  type: RECEIVE_TEXTS,\n  texts: json,\n});\n\nexport const fetchTexts = () => {\n  return (dispatch) => {\n    dispatch(requestTexts());\n\n    return fetch('https://glacial-earth-88103.herokuapp.com/training')\n      .then(\n        (res) => res.json(),\n        (error) => console.error('An error occurred.', error),\n      )\n      .then((json) => dispatch(receiveTexts(json)));\n  };\n};\n","export const getActiveLangCode = ({ textConfig }) => textConfig.langCode;\n\nexport const getTexts = ({ textConfig }) => textConfig.texts;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\n\nimport { getActiveText, getStartTime, getEndTime } from '../redux/selectors';\nimport { setFinish, startRace } from '../redux/actions';\nimport { TextField, TextInput } from '../components';\n\nconst BeforeFocus = styled.span`\n  color: var(--darkGray);\n`;\n\ninterface FocusProps {\n  isError?: any;\n}\n\nconst Focus = styled.span<FocusProps>`\n  color: ${({ isError }) => (isError ? 'var(--red)' : 'var(--blue)')};\n  text-decoration: underline;\n`;\n\nconst mapStateToProps = (state) => ({\n  text: getActiveText(state),\n  startTime: getStartTime(state),\n  endTime: getEndTime(state),\n});\n\nconst mapDispatchToProps = { setFinish, startRace };\n\ninterface TouchTypingProps {\n  text;\n  startTime;\n  setFinish;\n  endTime;\n}\n\ninterface TouchTypingState {\n  typeFocusText;\n  typingText;\n  isError;\n  beforeFocusText;\n  afterFocusText;\n  isSuccessInput;\n}\n\nclass TouchTypingClass extends Component<TouchTypingProps, TouchTypingState> {\n  private input: any;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      typingText: '',\n      isError: false,\n      beforeFocusText: [],\n      typeFocusText: '',\n      afterFocusText: [],\n      isSuccessInput: false,\n    };\n\n    this.input = null;\n  }\n\n  componentDidMount() {\n    const { text } = this.props;\n\n    const beforeFocusText = [];\n    const afterFocusText = text.split(' ');\n    const typeFocusText = afterFocusText.shift();\n\n    document.addEventListener('keypress', this.onTyping);\n    document.addEventListener('keyup', this.onClear);\n\n    this.setState({\n      beforeFocusText,\n      typeFocusText,\n      afterFocusText,\n    });\n  }\n\n  componentDidUpdate() {\n    const { startTime } = this.props;\n    if (startTime) {\n      this.input.focus();\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keypress', this.onTyping);\n    document.removeEventListener('keyup', this.onClear);\n  }\n\n  onClear = ({ keyCode }) => {\n    if (keyCode !== 8) return;\n\n    const { typeFocusText, typingText } = this.state;\n\n    if (typeFocusText.indexOf(typingText) !== -1) {\n      this.setState({\n        isError: false,\n      });\n    }\n  };\n\n  onTyping = ({ keyCode, key }) => {\n    const { afterFocusText, typeFocusText, typingText, isError } = this.state;\n\n    if (typeFocusText.split('')[typingText.length] !== key) {\n      this.setState({\n        isError: true,\n      });\n    }\n\n    if (typeFocusText.length === typingText.length && keyCode === 32 && !isError) {\n      const newAfterFocusText = [...afterFocusText];\n      const newBeforeFocusText = typeFocusText;\n      const newTypeFocusText = newAfterFocusText.shift();\n\n      this.setState((prevState) => ({\n        typeFocusText: newTypeFocusText,\n        afterFocusText: newAfterFocusText,\n        beforeFocusText: [...prevState.beforeFocusText, newBeforeFocusText],\n        isError: false,\n        typingText: '',\n        isSuccessInput: true,\n      }));\n    }\n\n    if (\n      afterFocusText.length === 0 &&\n      (key === '.' || key === '!' || key === '?' || key === ' ') &&\n      !isError\n    ) {\n      const { setFinish } = this.props;\n      const newBeforeFocusText = typeFocusText;\n\n      this.setState((prevState) => ({\n        typeFocusText: '',\n        typingText: '',\n        isSuccessInput: true,\n        beforeFocusText: [...prevState.beforeFocusText, newBeforeFocusText],\n        afterFocusText: [],\n      }));\n\n      setFinish(Date.now());\n    }\n  };\n\n  onInput = (value) => {\n    const { isSuccessInput } = this.state;\n\n    if (isSuccessInput) {\n      this.setState({\n        isSuccessInput: false,\n      });\n      return;\n    }\n\n    this.setState({\n      typingText: value,\n    });\n  };\n\n  render() {\n    const { afterFocusText, typeFocusText, beforeFocusText, typingText, isError } = this.state;\n    const { endTime } = this.props;\n\n    const textElement = (\n      <span>\n        <BeforeFocus>{`${beforeFocusText.join(' ')} `}</BeforeFocus>\n        <Focus isError={isError}>{typeFocusText}</Focus>\n        {` ${afterFocusText.join(' ')} `}\n      </span>\n    );\n\n    return (\n      <>\n        <TextField text={textElement} />\n        <TextInput\n          value={typingText}\n          isFinish={!!endTime}\n          onInput={this.onInput}\n          setRef={(el) => {\n            this.input = el;\n          }}\n        />\n      </>\n    );\n  }\n}\n\nexport const TouchTyping = connect(mapStateToProps, mapDispatchToProps)(TouchTypingClass);\n","import { FINISH, START_TIMER, START_RACE, RESTART_RACE } from '../consts';\nimport { ActionCreator } from '../actions';\n\nexport interface ITypingText {\n  isTimer: boolean;\n  activeText?: string;\n  startTime?: number;\n  endTime?: number;\n}\n\ninterface IActionTypingText extends ActionCreator {}\n\nconst defaultStore: ITypingText = {\n  activeText: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n  isTimer: false,\n};\n\nexport const typingText = (store = defaultStore, action: IActionTypingText) => {\n  switch (action.type) {\n    case FINISH:\n      return { ...store, endTime: action.time };\n    case START_TIMER:\n      return {\n        ...store,\n        isTimer: true,\n        activeText: action.text,\n      };\n    case START_RACE:\n      return {\n        ...store,\n        isTimer: false,\n        startTime: action.time,\n      };\n    case RESTART_RACE:\n      return {\n        ...defaultStore,\n      };\n    default:\n      return store;\n  }\n};\n","import { CHANGE_LANG, REQUEST_TEXTS, RECEIVE_TEXTS } from '../consts';\n\nconst defaultStore = {\n  selectedLang: 'en',\n  isFetching: false,\n  texts: [],\n  selectedText: null,\n};\n\nexport const textConfig = (store = defaultStore, action) => {\n  switch (action.type) {\n    case CHANGE_LANG:\n      return { ...store, selectedLang: action.langCode };\n    case REQUEST_TEXTS:\n      return { ...store, isFetching: true };\n    case RECEIVE_TEXTS:\n      return { ...store, isFetching: false, texts: action.texts };\n    default:\n      return store;\n  }\n};\n","import { combineReducers } from 'redux';\n\nimport { typingText } from './typingText';\nimport { textConfig } from './textConfig';\n\nexport const reducer = combineReducers({ typingText, textConfig });\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\n\nimport { App } from './containers';\nimport { reducer } from './redux/reducers';\n\nimport * as serviceWorker from './utils/serviceWorker';\nimport './index.scss';\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}